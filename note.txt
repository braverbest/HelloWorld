using Tc.Gny.Framework.ORM.Base;
using Tc.Gny.Framework.ORM.Core;
using Tc.Gny.Framework.ORM.Implementation;
using Tc.Gny.Framework.ORM.Interface;

namespace Journey.Entities
{
    public class DbContext<T> : DBContextBase
        where T : BaseEntity<T>, new()
    {
        public DbContext(DBOperationType type, string name)
            : base(type, name)
        {

        }

        public IDBContext<T> Context
        {
            get
            {
                return new EntityContext<T>(Session);
            }
        }
    }

    public partial class DbContext : DBContextBase
    {
        public DbContext(DBOperationType type, string name)
            : base(type, name)
        {

        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Tc.Gny.Framework.ORM.Attrbuites;
using Tc.Gny.Framework.ORM.Base;

namespace Entities.Model
{
    [Serializable]
    [Entity("TestUser")]
    public partial class TestUser : BaseEntity<TestUser>
    {
        private int _id;

        /// <summary>
        /// Id，自增长
        /// </summary>
        [PrimaryKey]
        [Identity]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this.ChangeStack("Id", value, this._id);
                this._id = value;
            }
        }

        private string _userName;

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                this.ChangeStack("UserName", value, this._userName);
                this._userName = value;
            }
        }

        private string _password;

        /// <summary>
        /// 用户名
        /// </summary>
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                this.ChangeStack("Password", value, this._password);
                this._password = value;
            }
        }
    }
}


public string getOrder() {
            using (var context = new DbContext<TestTable>(DBOperationType.Read, DbName.Journey))
            {
                return context.GetContext<TestTable>().Query("", "", null).FirstOrDefault().FullName.ToString();
            }
        }

        public int Update() {
            using (var context = new DbContext<TestUser>(DBOperationType.Write, DbName.Journey)) {
                var model = context.GetContext<TestUser>().Query("", "", null).FirstOrDefault();
                model.UserName = "ceshi";
                context.GetContext<TestUser>().Update(model);
                return context.SaveChanges();
            }
        }


